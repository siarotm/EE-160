'''
## CP 15

def MaxHourGlass(nlist):
    # calculates and returns the maximum hourglass sum
    totalSums = []
    # loop through all possible hourglasses
    rows = len(nlist)
    cols = len(nlist[0])
    for i in range(rows-2):
        for j in range(cols-2):
            #calculate sum and store
            totalSums.append(nlist[i][j] + nlist[i][j+1] + nlist[i][j+2] +
                                           nlist[i+1][j+1] +
                             nlist[i+2][j] + nlist[i+2][j+1] + nlist[i+2][j+2])
    print(totalSums)
    return max(totalSums)

if __name__ == "builtins":
    # debug to test the function
    #matrix1=[[1,1,1,0,0],[0,1,0,0,0],[1,1,1,0,0]]
    #print(MaxHourGlass(matrix1))
    #read in matrix data
    rows = int(input())
    
    #store data in a nested list
    data = []
    for i in range(rows):
        data.append([int(x) for x in input().split()])
    # call the MaxHourGlass function
    print(MaxHourGlass(data))
'''

class Rectangle:
    def __init__(self, w, h , xpos, ypos): #__init__ runs as a constructor
        self.width = w
        self.height = h
        self.pos=[xpos,ypos]
    def __str__(self): # this function must return a string - can be used with print()
        return f'This is a rectangle: width={self.width}, height={self.height}, Area={self.Area()}'
    def Area(self):
        return self.width * self.height
    def DBOR(self, other):
        if (isinstance(other, Rectangle)):
            return ((self.pos[0]-other.pos[0])**2+(self.pos[1]-other.pos[1])**2)**(1/2)
        else:
            print('error, DBOR only works between 2 rectangles')
    def __add__(self, other):
        #print('in add function:', self.__str__())
        #print(isinstance(other,Rectangle))\
        if isinstance(other, Rectangle):
            #return self.Area() + other.Area()
            r = Rectangle(self.width, other.height, other.pos[0], self.pos[1])
            return r
r1 = Rectangle(2, 3, 0 , 5)
r2 = Rectangle(4, 5, 5, 0)
print(r1.DBOR(r2))
print(r1.DBOR(5))
result=r1+r2
print(type(result), result, result.pos)



#print(isinstance(5, int))
#print(isinstance(3.14,int))
'''

class Matrix:
    def __init__(self):
        pass
    def GetData(self):
        print('Enter Matrix Data')
        rows = int(input())
        self.rowCount = rows
        #store data in a nested list
        self.data = []
        for i in range(rows):
            self.data.append([int(x) for x in input().split()])
        self.colCount = len(self.data[0])
    def __sub__(self, other):
        if isinstance(other, int):
            #subtract all values by other
            # return the correct matrix
            pass
            
        if isinstance(other, Matrix):
            #element by element subtraction
            if self.rowCount != other.rowCount or self.colCount != other.colCount:
                print('Error: Matrices must be the same size for Subtraction')
            else:
                data = []
                for i in range(self.rowCount):
                    row=[]
                    for j in range(self.colCount):
                        row.append(self.data[i][j] - other.data[i][j])
                    data.append(row)
                m = Matrix()
                m.data = data
                m.rowCount = self.rowCount
                m.colCount = self.colCount
                return m
m1 = Matrix()
m1.GetData()
m2 = Matrix()
m2.GetData()
m3 = m1 - m2
print(m3)
print(type(m3))
print(m3.data)




